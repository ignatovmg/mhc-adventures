from ilovemhc import define, utils, wrappers
from path import Path
import logging
import click
import pandas as pd
import atom_naming


@click.command()
@click.argument('pdb', type=click.Path(exists=True))
def cli(*args, **kwargs):
    score_models(*args, **kwargs)


def make_springs(out, pdb, chain='B',
                 nter_crd=(8.770, 10.594, 9.683),
                 #nter_crd=(0.0, 0.0, 0.0),
                 cter_crd=(31.514, 10.064, 10.259)):
    with open(pdb, 'r') as f:
        nter = None
        cter = None
        for line in f:
            if line.startswith('ATOM') or line.startswith('HETATM'):
                if utils.get_atom_fields(line, 'chain', 'atomn') == (chain, ' CA '):
                    if nter is None:
                        nter = ('CA', utils.get_atom_fields(line, 'resi'), chain)

                    cter = ('CA', utils.get_atom_fields(line, 'resi'), chain)
            if line.startswith('END'):
                break

    fmt = 'CoordinateConstraint {} {}{} CA 1A {:.3f} {:.3f} {:.3f} HARMONIC 0.0 0.5\n'
    with open(out, 'w') as f:
        f.write(fmt.format(nter[0], nter[1], nter[2], *nter_crd))
        f.write(fmt.format(cter[0], cter[1], cter[2], *cter_crd))

    return out


def score_models(pdb, out=None, convert=True, minimize=False, constraints=False):
    """
    Score models using rosetta flexpepdock.

    :param path.Path pdb: input pdb with models
    :param path.Path out: if None, it is set to pdb.dirname().joinpath('rosetta.csv')
    :param bool convert: convert to rosetta atom naming
    :param bool minimize: minimize models before scoring
    :param bool clean: remove models generated by rosetta
    :rtype: (path.Path, path.Path)
    :return: tuple(out, rosetta_pdb/None)
    """
    pdb = Path(pdb)
    if not out:
        out = pdb.dirname().joinpath('rosetta.csv')

    split_dir = pdb.dirname().joinpath('rosetta_input')
    split_dir.mkdir_p()

    for f in split_dir.files():
        f.remove()

    # convert to Rosetta atom naming
    logging.info('Converting name to Rosetta')
    pdb_converted = Path(wrappers.tmp_file_name('.pdb'))
    if convert:
        atom_naming.convert_to_rosetta(pdb, pdb_converted)
    else:
        Path.copyfile(pdb, pdb_converted)

    # split models into split/ dir
    logging.info('Splitting %s into %s' % (pdb, split_dir))
    utils.split_models(pdb_converted, split_dir)
    pdb_converted.remove()

    models = sorted(split_dir.files('*.pdb'))
    #models_list = split_dir.joinpath('input_models.list')
    #models_list.write_lines(models)
    #nmodels = len(models)

    # compute rosetta scores
    scores_path = out.dirname().joinpath('score.sc')
    scores_path.remove_p()

    rosetta_models_dir = out.dirname().joinpath('rosetta_output')
    rosetta_models_dir.mkdir_p()
    for f in rosetta_models_dir.files():
        f.remove()

    call = [define.FLEXPEPDOCK_EXE,
            '-database', define.ROSETTA_DB,
            '-out:no_nstruct_label',
            #'-in:file::l', models_list,
            '-ignore_zero_occupancy', 'false',
            '-out:file:scorefile', scores_path,
            '-overwrite',
            '-out:path:all', rosetta_models_dir]
    if minimize:
        call.append('-flexPepDockingMinimizeOnly')
        if constraints:
            springs = out.dirname().joinpath('rosetta-springs').abspath()
            call += ['-constraints::cst_fa_file', make_springs(springs, models[0])]
            call += ['-constraints:cst_fa_weight', '10.0']
    else:
        call.append('-flexpep_score_only')

    for pdb_in in models:
        try:
            wrappers.shell_call(call + ['-in:file:s', pdb_in], shell=False)
        except Exception as e:
            logging.error('Error minimizing ' + pdb_in)
            pass
            #logging.exception(e)

    for f in split_dir.files():
        f.remove()
    split_dir.removedirs()

    # transform to csv
    scores = pd.read_csv(scores_path, skiprows=1, sep='\s+')
    del scores['SCORE:']
    #scores = scores.dropna()
    good_models = [rosetta_models_dir.joinpath('%06i.pdb' % i) for i in scores['description']]
    scores.to_csv(out, float_format='%.4f')

    #assert(nmodels == len(good_models))

    # clean up
    rosetta_models = good_models  # sorted(rosetta_models_dir.files('*.pdb'))
    pdb_out = out.dirname().joinpath('rosetta.pdb')
    utils.assemble_models(rosetta_models, out=pdb_out, remove=True)

    logging.info('Converting Rosetta names')
    atom_naming.convert_from_rosetta(pdb_out)

    return out, pdb_out


if __name__ == '__main__':
    logging.basicConfig(format='%(asctime)s [%(levelname)s] %(message)s',
                        level=logging.DEBUG,
                        datefmt='%m/%d/%Y %I:%M:%S %p')
    cli()

